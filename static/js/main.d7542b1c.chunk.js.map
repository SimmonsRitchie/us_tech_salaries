{"version":3,"sources":["components/Preloader.js","DataHandling.js","components/CountyMap/County.js","components/CountyMap/CountyMap.js","components/Histogram/HistogramBar.js","components/Histogram/Axis.js","components/D3blackbox.js","components/Histogram/Histogram.js","components/Meta/USStatesMap.js","components/Meta/Title.js","components/Meta/Description.js","components/MedianLine.js","components/Controls/Toggle.js","components/Controls/ControlRow.js","components/Controls/index.js","App.js","serviceWorker.js","index.js","assets/preloading.png"],"names":["Preloader","className","src","PreloaderImg","style","width","alt","cleanIncome","d","countyName","USstate","medianIncome","Number","lowerBound","upperBound","dateParse","d3","cleanSalary","employer","submit_date","start_date","case_status","job_title","clean_job_title","base_salary","city","county","countyID","cleanUSStateName","code","id","name","cleanCounty","ChoroplethColors","_","reverse","County","nextProps","nextState","this","props","zoom","value","geoPath","feature","quantize","color","fill","title","Component","CountyMap","projection","scale","state","range","usTopoJson","values","us","usStatesMesh","topojson","objects","states","a","b","counties","features","countyValueMap","fromPairs","map","key","stroke","strokeLinejoin","translate","height","USstatePaths","find","USstateNames","centroid","domain","HistogramBar","percent","x","y","label","toFixed","replace","transform","textAnchor","D3render","Axis","axis","tickFormat","ticks","data","length","anchorRef","current","call","React","createRef","ref","Histogram","histogram","widthScale","yScale","makeBar","bar","N","axisMargin","x1","x0","bars","thresholds","bins","counts","bottomMargin","AL","AK","AS","AZ","AR","CA","CO","CT","DE","DC","FM","FL","GA","GU","HI","ID","IL","IN","IA","KS","KY","LA","ME","MH","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","MP","OH","OK","OR","PW","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","Title","mean","format","d3mean","yearsFragment","USstateFragment","jobTitleFragment","stateFragment","year","filteredBy","USStatesMap","toUpperCase","jobTitle","scaleLinear","d3extent","Description","allData","filter","getFullYear","deviation","d3deviation","UStateFragment","previousYearFragment","countyFragment","fragment","lastYear","allDataForYear","allDataForJobTitle","allDataForUSstate","Math","abs","byCounty","groupBy","medians","medianIncomesByCounty","ordered","sortBy","keys","items","best","countyMedian","byCity","S","titleCase","s","jobFragment","yearFragment","href","MedianLine","median","line","medianValue","medianLabel","Toggle","onClick","ControlRow","makePick","picked","newState","updateDataFilter","capitalize","toggleNames","_addToggle","Controls","yearFilter","jobTitleFilter","USstateFilter","updateYearFilter","reset","setState","reportUpdateUpTheChain","updateJobTitleFilter","updateUSstateFilter","window","location","hash","split","filters","join","years","Set","jobTitles","USstates","Array","from","App","techSalaries","medianIncomes","countyNames","salariesFilter","callback","noop","Promise","all","then","medianIncomesMap","forEach","isNull","medianIncomesByUSState","loadAllData","techSalariesMap","medianHousehold","salaries","filteredSalaries","filteredSalariesMap","countyValues","countyValue","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.d7542b1c.chunk.js","sourcesContent":["import React from \"react\";\nimport PreloaderImg from \"../assets/preloading.png\";\n\nconst Preloader = () => {\n  return (\n    <div className=\"App container\">\n      <h1>The average H1B in tech pays $86,164/year</h1>\n      <p className=\"lead\">\n        Since 2012 the US tech industry has sponsored 176,075 H1B work visas.\n        Most of them paid <b>$60,660 to $111,668</b> per year (1 standard\n        deviation).{\" \"}\n        <span>\n          The best city for an H1B is <b>Kirkland, WA</b> with an average\n          individual salary <b>$39,465 above local household median</b>. Median\n          household salary is a good proxy for cost of living in an area.\n        </span>\n      </p>\n      <img src={PreloaderImg} style={{ width: \"100%\" }} alt=\"Loading preview\" />\n      <h2 className=\"text-center\">Loading data ...</h2>\n    </div>\n  );\n};\n\nexport default Preloader;\n","// src/DataHandling.js\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\n\nconst cleanIncome = d => ({\n  countyName: d[\"Name\"],\n  USstate: d[\"State\"],\n  medianIncome: Number(d[\"Median Household Income\"]),\n  lowerBound: Number(d[\"90% CI Lower Bound\"]),\n  upperBound: Number(d[\"90% CI Upper Bound\"])\n});\n\nconst dateParse = d3.timeParse(\"%m/%d/%Y\");\n\nconst cleanSalary = d => {\n  if (!d[\"base salary\"] || Number(d[\"base salary\"]) > 300000) {\n    return null;\n  }\n\n  return {\n    employer: d.employer,\n    submit_date: dateParse(d[\"submit date\"]),\n    start_date: dateParse(d[\"start date\"]),\n    case_status: d[\"case status\"],\n    job_title: d[\"job title\"],\n    clean_job_title: d[\"job title\"],\n    base_salary: Number(d[\"base salary\"]),\n    city: d[\"city\"],\n    USstate: d[\"state\"],\n    county: d[\"county\"],\n    countyID: d[\"countyID\"]\n  };\n};\n\nconst cleanUSStateName = d => ({\n  code: d.code,\n  id: Number(d.id),\n  name: d.name\n});\n\nconst cleanCounty = d => ({\n  id: Number(d.id),\n  name: d.name\n});\n\nexport const loadAllData = (callback = _.noop) => {\n  // Second arg is a 'cleaning' func applied to each row\n  Promise.all([\n    d3.json(\"data/us.json\"),\n    d3.csv(\"data/us-county-names-normalized.csv\", cleanCounty),\n    d3.csv(\"data/county-median-incomes.csv\", cleanIncome),\n    d3.csv(\"data/h1bs-2012-2016-shortened.csv\", cleanSalary),\n    d3.tsv(\"data/us-state-names.tsv\", cleanUSStateName)\n  ]).then(([us, countyNames, medianIncomes, techSalaries, USstateNames]) => {\n    let medianIncomesMap = {};\n\n    // Map county names to median income\n    medianIncomes\n      .filter(d => _.find(countyNames, { name: d[\"countyName\"] }))\n      .forEach(d => {\n        d[\"countyID\"] = _.find(countyNames, { name: d[\"countyName\"] }).id;\n        medianIncomesMap[d.countyID] = d;\n      });\n\n    // remove null vals\n    techSalaries = techSalaries.filter(d => !_.isNull(d));\n\n    // return vals\n    callback({\n      usTopoJson: us,\n      countyNames: countyNames,\n      medianIncomes: medianIncomesMap,\n      medianIncomesByCounty: _.groupBy(medianIncomes, \"countyName\"),\n      medianIncomesByUSState: _.groupBy(medianIncomes, \"USstate\"),\n      techSalaries: techSalaries,\n      USstateNames: USstateNames\n    });\n  });\n};\n","// src/components/CountyMap/County.js\nimport React, { Component } from \"react\";\nimport _ from \"lodash\";\n\nconst ChoroplethColors = _.reverse([\n  \"rgb(247,251,255)\",\n  \"rgb(222,235,247)\",\n  \"rgb(198,219,239)\",\n  \"rgb(158,202,225)\",\n  \"rgb(107,174,214)\",\n  \"rgb(66,146,198)\",\n  \"rgb(33,113,181)\",\n  \"rgb(8,81,156)\",\n  \"rgb(8,48,107)\"\n]);\n\nconst BlankColor = \"rgb(240,240,240)\";\n\n// src/components/CountyMap/County.js\nclass County extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    const { zoom, value } = this.props;\n\n    return zoom !== nextProps.zoom || value !== nextProps.value;\n  }\n\n  render() {\n    const { value, geoPath, feature, quantize } = this.props;\n\n    let color = BlankColor;\n\n    if (value) {\n      color = ChoroplethColors[quantize(value)];\n    }\n\n    return (\n      <path d={geoPath(feature)} style={{ fill: color }} title={feature.id} />\n    );\n  }\n}\n\nexport default County;\n","import React, {Component} from \"react\";\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson\";\nimport _ from \"lodash\";\nimport County from \"./County\";\n\nclass CountyMap extends Component {\n  constructor(props) {\n    super(props);\n    const projection = d3.geoAlbersUsa().scale(1280);\n    this.state = {\n      geoPath: d3.geoPath().projection(projection),\n      quantize: d3.scaleQuantize().range(d3.range(9)),\n      projection\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let { projection, quantize, geoPath } = state;\n\n    projection\n      .translate([props.width / 2, props.height / 2])\n      .scale(props.width * 1.3);\n\n    if (props.zoom && props.usTopoJson) {\n      const us = props.usTopoJson,\n        USstatePaths = topojson.feature(us, us.objects.states).features,\n        id = _.find(props.USstateNames, { code: props.zoom }).id;\n\n      projection.scale(props.width * 4.5);\n\n      const centroid = geoPath.centroid(_.find(USstatePaths, { id: id })),\n        translate = projection.translate();\n\n      projection.translate([\n        translate[0] - centroid[0] + props.width / 2,\n        translate[1] - centroid[1] + props.height / 2\n      ]);\n    }\n\n    if (props.values) {\n      quantize.domain([\n        d3.quantile(props.values, 0.15, d => d.value),\n        d3.quantile(props.values, 0.85, d => d.value)\n      ]);\n    }\n\n    return {\n      ...state,\n      projection,\n      quantize\n    };\n  }\n  render() {\n    const { usTopoJson, values, zoom } = this.props,\n      { geoPath, quantize } = this.state;\n    if (!usTopoJson) {\n      return null;\n    } else {\n      const us = usTopoJson;\n      // gets states from usTopojson\n      const usStatesMesh = topojson.mesh(\n        us,\n        us.objects.states,\n        (a, b) => a !== b // Swizec says he doesn't know why we need this but we do\n      );\n      // gets counties from usTopojson\n      const counties = topojson.feature(us, us.objects.counties).features;\n      // fromPairs combines an array into an object\n      const countyValueMap = _.fromPairs(\n        values.map(d => [d.countyID, d.value])\n      );\n\n      return (\n        <g>\n          {counties.map(feature => (\n            <County\n              geoPath={geoPath}\n              feature={feature}\n              zoom={zoom}\n              key={feature.id}\n              quantize={quantize}\n              value={countyValueMap[feature.id]}\n            />\n          ))}\n\n          <path\n            d={geoPath(usStatesMesh)}\n            style={{\n              fill: \"none\",\n              stroke: \"#fff\",\n              strokeLinejoin: \"round\"\n            }}\n          />\n        </g>\n      );\n    }\n  }\n}\n\nexport default CountyMap;\n","import React from \"react\";\n\nconst HistogramBar = ({ percent, x, y, width, height }) => {\n    let translate = `translate(${x}, ${y})`,\n        label = percent.toFixed(0) + \"%\";\n\n    if (percent < 1) {\n        label = percent.toFixed(2) + \"%\";\n    }\n\n    if (width < 20) {\n        label = label.replace(\"%\", \"\");\n    }\n\n    if (width < 10) {\n        label = \"\";\n    }\n\n    return (\n        <g transform={translate} className=\"bar\">\n            <rect\n                width={width}\n                height={height - 2}\n                transform=\"translate(0, 1)\"\n            />\n            <text textAnchor=\"end\" x={width - 5} y={height / 2 + 3}>\n                {label}\n            </text>\n        </g>\n    );\n};\n\nexport default HistogramBar;\n","import * as d3 from \"d3\";\nimport D3blackbox from \"../D3blackbox\";\n\nconst Axis = D3blackbox(function () {\n  const axis = d3\n    .axisLeft()\n    .tickFormat((d) => `${d3.format(\".2s\")(d)}`)\n    .scale(this.props.scale)\n    .ticks(this.props.data.length);\n\n  d3.select(this.anchorRef.current).call(axis);\n});\n\nexport default Axis;\n","import React from \"react\";\n\nexport default function D3blackbox(D3render) {\n  return class Blackbox extends React.Component {\n    anchorRef = React.createRef();\n\n    componentDidMount() {\n      D3render.call(this);\n    }\n    componentDidUpdate() {\n      D3render.call(this);\n    }\n\n    render() {\n      const { x, y } = this.props;\n      return <g transform={`translate(${x}, ${y})`} ref={this.anchorRef} />;\n    }\n  };\n}\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nimport HistogramBar from \"./HistogramBar\";\nimport Axis from \"./Axis\";\n\nclass Histogram extends React.Component {\n    state = {\n        histogram: d3.histogram(),\n        widthScale: d3.scaleLinear(),\n        yScale: d3.scaleLinear()\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        let { histogram, widthScale, yScale } = state;\n\n        histogram.thresholds(props.bins).value(props.value);\n\n        const bars = histogram(props.data),\n            counts = bars.map(d => d.length);\n\n        widthScale\n            .domain([d3.min(counts), d3.max(counts)])\n            .range([0, props.width - props.axisMargin]);\n\n        yScale\n            .domain([0, d3.max(bars, d => d.x1)])\n            .range([props.height - props.y - props.bottomMargin, 0]);\n\n        return {\n            ...state,\n            histogram,\n            widthScale,\n            yScale\n        };\n    }\n\n    makeBar = (bar, N) => {\n        const { yScale, widthScale } = this.state;\n\n        let percent = (bar.length / this.props.data.length) * 100;\n\n        let props = {\n            percent,\n            x: this.props.axisMargin,\n            y: yScale(bar.x1),\n            width: widthScale(bar.length),\n            height: yScale(bar.x0) - yScale(bar.x1),\n            key: `histogram-bar-${bar.x0}`\n        };\n\n        return <HistogramBar {...props} />;\n    };\n\n    render() {\n        const { histogram, yScale } = this.state,\n            { x, y, data, axisMargin } = this.props;\n\n        const bars = histogram(data);\n\n        return (\n            <g className=\"histogram\" transform={`translate(${x}, ${y})`}>\n                <g className=\"bars\">{bars.map(this.makeBar)}</g>\n                <Axis x={axisMargin - 3} y={0} data={bars} scale={yScale} />\n            </g>\n        );\n    }\n}\n\nexport default Histogram;\n","export default {\n  AL: \"Alabama\",\n  AK: \"Alaska\",\n  AS: \"American Samoa\",\n  AZ: \"Arizona\",\n  AR: \"Arkansas\",\n  CA: \"California\",\n  CO: \"Colorado\",\n  CT: \"Connecticut\",\n  DE: \"Delaware\",\n  DC: \"District Of Columbia\",\n  FM: \"Federated States Of Micronesia\",\n  FL: \"Florida\",\n  GA: \"Georgia\",\n  GU: \"Guam\",\n  HI: \"Hawaii\",\n  ID: \"Idaho\",\n  IL: \"Illinois\",\n  IN: \"Indiana\",\n  IA: \"Iowa\",\n  KS: \"Kansas\",\n  KY: \"Kentucky\",\n  LA: \"Louisiana\",\n  ME: \"Maine\",\n  MH: \"Marshall Islands\",\n  MD: \"Maryland\",\n  MA: \"Massachusetts\",\n  MI: \"Michigan\",\n  MN: \"Minnesota\",\n  MS: \"Mississippi\",\n  MO: \"Missouri\",\n  MT: \"Montana\",\n  NE: \"Nebraska\",\n  NV: \"Nevada\",\n  NH: \"New Hampshire\",\n  NJ: \"New Jersey\",\n  NM: \"New Mexico\",\n  NY: \"New York\",\n  NC: \"North Carolina\",\n  ND: \"North Dakota\",\n  MP: \"Northern Mariana Islands\",\n  OH: \"Ohio\",\n  OK: \"Oklahoma\",\n  OR: \"Oregon\",\n  PW: \"Palau\",\n  PA: \"Pennsylvania\",\n  PR: \"Puerto Rico\",\n  RI: \"Rhode Island\",\n  SC: \"South Carolina\",\n  SD: \"South Dakota\",\n  TN: \"Tennessee\",\n  TX: \"Texas\",\n  UT: \"Utah\",\n  VT: \"Vermont\",\n  VI: \"Virgin Islands\",\n  VA: \"Virginia\",\n  WA: \"Washington\",\n  WV: \"West Virginia\",\n  WI: \"Wisconsin\",\n  WY: \"Wyoming\",\n};\n","import React from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport { mean as d3mean, extent as d3extent } from \"d3-array\";\n\nimport USStatesMap from \"./USStatesMap\";\n\nclass Title extends React.Component {\n    get yearsFragment() {\n        const year = this.props.filteredBy.year;\n\n        return year === \"*\" ? \"\" : `in ${year}`;\n    }\n\n    get USstateFragment() {\n        const USstate = this.props.filteredBy.USstate;\n\n        return USstate === \"*\" ? \"\" : USStatesMap[USstate.toUpperCase()];\n    }\n\n    get jobTitleFragment() {\n        const { jobTitle, year } = this.props.filteredBy;\n        let title = \"\";\n\n        if (jobTitle === \"*\") {\n            if (year === \"*\") {\n                title = \"The average H1B in tech pays\";\n            } else {\n                title = \"The average tech H1B paid\";\n            }\n        } else {\n            title = `Software ${jobTitle}s on an H1B`;\n            if (year === \"*\") {\n                title += \" make\";\n            } else {\n                title += \" made\";\n            }\n        }\n\n        return title;\n    }\n\n    get format() {\n        return scaleLinear()\n            .domain(d3extent(this.props.data, d => d.base_salary))\n            .tickFormat();\n    }\n\n    render() {\n        const mean = this.format(d3mean(this.props.data, d => d.base_salary));\n        let title;\n\n        if (this.yearsFragment && this.USstateFragment) {\n            title = (\n                <h2>\n                    In {this.USstateFragment}, {this.jobTitleFragment} ${mean}\n                    /year {this.yearsFragment}\n                </h2>\n            );\n        } else {\n            title = (\n                <h2>\n                    {this.jobTitleFragment} ${mean}\n                    /year{\" \"}\n                    {this.USstateFragment\n                        ? `in ${this.stateFragment}`\n                        : \"\"}{\" \"}\n                    {this.yearsFragment}\n                </h2>\n            );\n        }\n\n        return title;\n    }\n}\n\nexport default Title;\n","import React from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n    mean as d3mean,\n    extent as d3extent,\n    deviation as d3deviation\n} from \"d3-array\";\nimport _ from \"lodash\";\nimport S from \"string\";\n\nimport USStatesMap from \"./USStatesMap\";\n\nclass Description extends React.Component {\n    allDataForYear(year, data = this.props.allData) {\n        return data.filter(d => d.submit_date.getFullYear() === year);\n    }\n\n    allDataForJobTitle(jobTitle, data = this.props.allData) {\n        return data.filter(d => d.clean_job_title === jobTitle);\n    }\n\n    allDataForUSstate(USstate, data = this.props.allData) {\n        return data.filter(d => d.USstate === USstate);\n    }\n\n    get yearsFragment() {\n        const year = this.props.filteredBy.year;\n\n        return year === \"*\" ? \"\" : `In ${year}`;\n    }\n\n    get USstateFragment() {\n        const USstate = this.props.filteredBy.USstate;\n\n        return USstate === \"*\" ? \"\" : USStatesMap[USstate.toUpperCase()];\n    }\n\n    get previousYearFragment() {\n        const year = this.props.filteredBy.year;\n\n        let fragment;\n\n        if (year === \"*\") {\n            fragment = \"\";\n        } else if (year === 2012) {\n            fragment = \"\";\n        } else {\n            const { USstate, jobTitle } = this.props.filteredBy;\n            let lastYear = this.allDataForYear(year - 1);\n\n            if (jobTitle !== \"*\") {\n                lastYear = this.allDataForJobTitle(jobTitle, lastYear);\n            }\n\n            if (USstate !== \"*\") {\n                lastYear = this.allDataForUSstate(USstate, lastYear);\n            }\n\n            if (this.props.data.length / lastYear.length > 2) {\n                fragment =\n                    \", \" +\n                    (this.props.data.length / lastYear.length).toFixed() +\n                    \" times more than the year before\";\n            } else {\n                const percent = (\n                    (1 - lastYear.length / this.props.data.length) *\n                    100\n                ).toFixed();\n\n                fragment =\n                    \", \" +\n                    Math.abs(percent) +\n                    \"% \" +\n                    (percent > 0 ? \"more\" : \"less\") +\n                    \" than the year before\";\n            }\n        }\n\n        return fragment;\n    }\n\n    get jobTitleFragment() {\n        const jobTitle = this.props.filteredBy.jobTitle;\n        let fragment;\n\n        if (jobTitle === \"*\") {\n            fragment = \"H1B work visas\";\n        } else {\n            if (jobTitle === \"other\") {\n                fragment = \"H1B work visas\";\n            } else {\n                fragment = `H1B work visas for software ${jobTitle}s`;\n            }\n        }\n\n        return fragment;\n    }\n\n    get countyFragment() {\n        const byCounty = _.groupBy(this.props.data, \"countyID\"),\n            medians = this.props.medianIncomesByCounty;\n\n        let ordered = _.sortBy(\n            _.keys(byCounty)\n                .map(county => byCounty[county])\n                .filter(d => d.length / this.props.data.length > 0.01),\n            items =>\n                d3mean(items, d => d.base_salary) -\n                medians[items[0].countyID][0].medianIncome\n        );\n\n        let best = ordered[ordered.length - 1],\n            countyMedian = medians[best[0].countyID][0].medianIncome;\n\n        const byCity = _.groupBy(best, \"city\");\n\n        ordered = _.sortBy(\n            _.keys(byCity)\n                .map(city => byCity[city])\n                .filter(d => d.length / best.length > 0.01),\n            items => d3mean(items, d => d.base_salary) - countyMedian\n        );\n\n        best = ordered[ordered.length - 1];\n\n        const city = S(best[0].city).titleCase().s + `, ${best[0].USstate}`,\n            mean = d3mean(best, d => d.base_salary);\n\n        const jobFragment = this.jobTitleFragment\n            .replace(\"H1B work visas for\", \"\")\n            .replace(\"H1B work visas\", \"\");\n\n        return (\n            <span>\n                The best city{\" \"}\n                {jobFragment.length\n                    ? `for ${jobFragment} on an H1B`\n                    : \"for an H1B\"}{\" \"}\n                {this.yearFragment ? \"was\" : \"is\"} <b>{city}</b> with an average\n                salary ${this.format(mean - countyMedian)} above the local\n                household median. Median household income is a good proxy for\n                cost of living in an area.{\" \"}\n                <a href=\"https://en.wikipedia.org/wiki/Household_income\">[1]</a>\n                .\n            </span>\n        );\n    }\n\n    get format() {\n        return scaleLinear()\n            .domain(d3extent(this.props.data, d => d.base_salary))\n            .tickFormat();\n    }\n\n    render() {\n        const format = this.format,\n            mean = d3mean(this.props.data, d => d.base_salary),\n            deviation = d3deviation(this.props.data, d => d.base_salary);\n\n        return (\n            <p className=\"lead\">\n                {this.yearsFragment ? this.yearsFragment : \"Since 2012\"} the{\" \"}\n                {this.UStateFragment} tech industry{\" \"}\n                {this.yearsFragment ? \"sponsored\" : \"has sponsored\"}{\" \"}\n                <b>\n                    {format(this.props.data.length)} {this.jobTitleFragment}\n                </b>\n                {this.previousYearFragment}. Most of them paid{\" \"}\n                <b>\n                    ${format(mean - deviation)} to ${format(mean + deviation)}\n                </b>{\" \"}\n                per year. {this.countyFragment}\n            </p>\n        );\n    }\n}\n\nexport default Description;\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nconst MedianLine = ({\n    data,\n    value,\n    width,\n    height,\n    x,\n    y,\n    bottomMargin,\n    median\n}) => {\n    const yScale = d3\n            .scaleLinear()\n            .domain([0, d3.max(data, value)])\n            .range([height - y - bottomMargin, 0])\n    /** \n     * D3 Line generator takes an array of pairs, each pair specifies a X.Y coord \n     * In this case we're just making a straight line that's translated based on our\n     * median value.\n    */\n    const line = d3.line()([[0, 5], [width, 5]]);\n\n    const medianValue = median || d3.median(data, value);\n\n    const translate = `translate(${x}, ${yScale(medianValue)})`,\n        medianLabel = `Median Household: $${yScale.tickFormat()(medianValue)}`;\n\n    return (\n        <g className=\"mean\" transform={translate}>\n            <text x={width - 5} y={0} textAnchor=\"end\">\n                {medianLabel}\n            </text>\n            <path d={line} />\n        </g>\n    );\n};\n\nexport default MedianLine;\n","import React from \"react\";\n\nconst Toggle = ({ label, name, value, onClick }) => {\n    let className = \"btn btn-default\";\n\n    if (value) {\n        className += \" btn-primary\";\n    }\n\n    return (\n        <button className={className} onClick={() => onClick(name, !value)}>\n            {label}\n        </button>\n    );\n};\n\nexport default Toggle;\n","import React from \"react\";\nimport Toggle from \"./Toggle\";\n\nclass ControlRow extends React.Component {\n    makePick = (picked, newState) => {\n        this.props.updateDataFilter(picked, !newState);\n    };\n\n    _addToggle(name) {\n        let key = `toggle-${name}`,\n            label = name;\n\n        if (this.props.capitalize) {\n            label = label.toUpperCase();\n        }\n\n        return (\n            <Toggle\n                label={label}\n                name={name}\n                key={key}\n                value={this.props.picked === name}\n                onClick={this.makePick}\n            />\n        );\n    }\n\n    render() {\n        const { toggleNames } = this.props;\n\n        return (\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    {toggleNames.map(name => this._addToggle(name))}\n                </div>\n            </div>\n        );\n    }\n}\nexport default ControlRow;\n","import React from \"react\";\nimport ControlRow from \"./ControlRow\";\n\nclass Controls extends React.Component {\n    state = {\n        yearFilter: () => true,\n        jobTitleFilter: () => true,\n        USstateFilter: () => true,\n        year: \"*\",\n        jobTitle: \"*\",\n        USstate: \"*\"\n    };\n\n    componentDidMount() {\n        let [year, USstate, jobTitle] = window.location.hash\n            .replace(\"#\", \"\")\n            .split(\"-\");\n\n        if (year !== \"*\" && year) {\n            this.updateYearFilter(Number(year));\n        }\n\n        if (USstate !== \"*\" && USstate) {\n            this.updateUSstateFilter(USstate);\n        }\n\n        if (jobTitle !== \"*\" && jobTitle) {\n            this.updateJobTitleFilter(jobTitle);\n        }\n    }\n\n    updateYearFilter = (year, reset) => {\n        let filter = d => d.submit_date.getFullYear() === year;\n\n        if (reset || !year) {\n            filter = () => true;\n            year = \"*\";\n        }\n\n        this.setState(\n            {\n                yearFilter: filter,\n                year: year\n            },\n            () => this.reportUpdateUpTheChain()\n        );\n    };\n\n    updateJobTitleFilter = (title, reset) => {\n        let filter = d => d.clean_job_title === title;\n\n        if (reset || !title) {\n            filter = () => true;\n            title = \"*\";\n        }\n\n        this.setState(\n            {\n                jobTitleFilter: filter,\n                jobTitle: title\n            },\n            () => this.reportUpdateUpTheChain()\n        );\n    };\n\n    updateUSstateFilter = (USstate, reset) => {\n        let filter = d => d.USstate === USstate;\n\n        if (reset || !USstate) {\n            filter = () => true;\n            USstate = \"*\";\n        }\n\n        this.setState(\n            {\n                USstateFilter: filter,\n                USstate: USstate\n            },\n            () => this.reportUpdateUpTheChain()\n        );\n    };\n\n    reportUpdateUpTheChain() {\n        window.location.hash = [\n            this.state.year || \"*\",\n            this.state.USstate || \"*\",\n            this.state.jobTitle || \"*\"\n        ].join(\"-\");\n\n        this.props.updateDataFilter(\n            (filters => {\n                return d =>\n                    filters.yearFilter(d) &&\n                    filters.jobTitleFilter(d) &&\n                    filters.USstateFilter(d);\n            })(this.state),\n            {\n                year: this.state.year,\n                jobTitle: this.state.jobTitle,\n                USstate: this.state.USstate\n            }\n        );\n    }\n\n    render() {\n        const { data } = this.props;\n\n        const years = new Set(data.map(d => d.submit_date.getFullYear())),\n            jobTitles = new Set(data.map(d => d.clean_job_title)),\n            USstates = new Set(data.map(d => d.USstate));\n\n        return (\n            <div>\n                <ControlRow\n                    data={data}\n                    toggleNames={Array.from(years.values())}\n                    picked={this.state.year}\n                    updateDataFilter={this.updateYearFilter}\n                />\n\n                <ControlRow\n                    data={data}\n                    toggleNames={Array.from(jobTitles.values())}\n                    picked={this.state.jobTitle}\n                    updateDataFilter={this.updateJobTitleFilter}\n                />\n\n                <ControlRow\n                    data={data}\n                    toggleNames={Array.from(USstates.values())}\n                    picked={this.state.USstate}\n                    updateDataFilter={this.updateUSstateFilter}\n                    capitalize\n                />\n            </div>\n        );\n    }\n}\n\nexport default Controls;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport Preloader from \"./components/Preloader\";\nimport { loadAllData } from \"./DataHandling\";\nimport CountyMap from \"./components/CountyMap\";\nimport Histogram from \"./components/Histogram\";\nimport { Title, Description } from \"./components/Meta\";\nimport MedianLine from \"./components/MedianLine\";\nimport Controls from './components/Controls'\n\nclass App extends Component {\n  state = {\n    techSalaries: [],\n    medianIncomes: [],\n    countyNames: [],\n    salariesFilter: () => true,\n    filteredBy: {\n      USstate: \"*\",\n      year: \"*\",\n      jobTitle: \"*\",\n    },\n  };\n\n  componentDidMount() {\n    loadAllData((data) => this.setState(data));\n  }\n\n  countyValue(county, techSalariesMap) {\n    const medianHousehold = this.state.medianIncomes[county.id],\n      salaries = techSalariesMap[county.name];\n    if (!medianHousehold || !salaries) {\n      return null;\n    }\n    const median = d3.median(salaries, (d) => d.base_salary);\n    return {\n      countyID: county.id,\n      value: median - medianHousehold.medianIncome,\n    };\n  }\n\n  updateDataFilter = (filter, filteredBy) => {\n    this.setState({\n      salariesFilter: filter,\n      filteredBy: filteredBy\n    })\n  }\n\n  render() {\n    const {\n      techSalaries,\n      countyNames,\n      usTopoJson,\n      USstateNames,\n      filteredBy,\n    } = this.state;\n    if (techSalaries.length < 1) {\n      return <Preloader />;\n    }\n\n    const filteredSalaries = techSalaries.filter(this.state.salariesFilter)\n    const filteredSalariesMap = _.groupBy(filteredSalaries, \"countyID\")\n    const countyValues = countyNames\n        .map((county) => this.countyValue(county, filteredSalariesMap))\n        .filter((d) => !_.isNull(d));\n\n    let zoom = null;\n    let medianHousehold = this.state.medianIncomesByUSState[\"US\"][0]\n      .medianIncome;\n\n    if (filteredBy.USstate !== '*') {\n      zoom = this.state.filteredBy.USstate\n      medianHousehold = d3.mean(\n        this.state.medianIncomesByUSState[zoom], \n        d=> d.medianIncome)\n    }\n\n    return (\n      <div className=\"App container\">\n      <Title data={filteredSalaries} filteredBy={filteredBy} />\n      <Description\n          data={filteredSalaries}\n          allData={techSalaries}\n          filteredBy={filteredBy}\n          medianIncomesByCounty={this.state.medianIncomesByCounty}\n      />\n        <svg width=\"1100\" height=\"500\">\n          <CountyMap\n            usTopoJson={usTopoJson}\n            USstateNames={USstateNames}\n            values={countyValues}\n            x={0}\n            y={0}\n            width={500}\n            height={500}\n            zoom={zoom}\n          />\n          <rect x=\"500\" y=\"0\" width=\"600\" height=\"500\" style={{fill: \"white\"}}  />\n          <Histogram\n            bins={10}\n            width={500}\n            height={500}\n            x={500}\n            y={10}\n            data={filteredSalaries}\n            axisMargin={83}\n            bottomMargin={5}\n            // we use a func because easier to reuse component\n            value={(d) => d.base_salary}\n          />\n          <MedianLine\n            data={filteredSalaries}\n            x={500}\n            y={10}\n            width={600}\n            height={500}\n            bottomMargin={5}\n            median={medianHousehold}\n            value={(d) => d.base_salary}\n          />\n        </svg>\n        <Controls \n          data={techSalaries} \n          updateDataFilter={this.updateDataFilter} \n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/styles.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/preloading.0e87f8f1.png\";"],"sourceRoot":""}